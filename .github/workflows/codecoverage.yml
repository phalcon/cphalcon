name: Codecoverage

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  pull_request:

jobs:
  build-and-run:
    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_USER: phalcon
          MYSQL_DATABASE: phalcon
          MYSQL_PASSWORD: secret
      postgres:
        image: postgres:12-alpine
        ports:
          - 5432
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: phalcon
          POSTGRES_DB: phalcon
      redis:
        image: redis:5-alpine
        ports:
          - 6379
      memcached:
        image: memcached:1.5-alpine
        ports:
          - 11211
    runs-on: ubuntu-latest
    name: Build & Run
    steps:

      - name: Set environment variables
        run: |
          echo "::set-env name=ZEPHIR_PARSER_VERSION::v1.3.3"
          echo "::set-env name=ZEPHIR_VERSION::0.12.16"

      - name: Setup PHP
        uses: shivammathur/setup-php@v1
        with:
          php-version: '7.4'
          extensions: mbstring, intl, json, psr, imagick, apcu
          ini-values: apc.enable_cli=on, session.save_path=/tmp

      - name: Common settings
        run: |
          # Core dump settings
          ulimit -c unlimited -S || true

          # Hide "You are in 'detached HEAD' state" message
          git config --global advice.detachedHead false

          # Will be used before as a cache key
          export CPUHASH="$(cat /proc/cpuinfo | grep "model name" | head -n 1 | cut -d':' -f2 | md5sum)"

          #enable codecoverage
          export LDFLAGS="${LDFLAGS} --coverage"
          export CFLAGS="${CFLAGS} -O0 -ggdb -fprofile-arcs -ftest-coverage"
          export CXXFLAGS="${CXXFLAGS} -O0 -ggdb -fprofile-arcs -ftest-coverage"

          #set number of cores for build
          export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"

      - name: Git checkout
        uses: actions/checkout@v2-beta
        with:
          fetch-depth: 1

      - name: Setup APT repositories
        run: |
          # We don't need this at all, and our
          # builds often fails because Microsoft
          # servers are unstable or even offline.
          sudo rm -f /etc/apt/sources.list.d/dotnetdev.list
          sudo rm -f /etc/apt/sources.list.d/azure*.list

      - name: Install system dependencies
        run: |
          sudo apt-get update --quiet --yes 1>/dev/null
          sudo apt-get install --no-install-recommends -q -y re2c

      - name: Get Zephir Parser Cache Key
        id: zephir-parser-cache-key
        run: echo "::set-output name=key::$(echo -n ${ZEPHIR_PARSER_VERSION}_${CPUHASH})"

      - name: Cache Zephir Parser
        uses: actions/cache@v1
        with:
          path: ~/php-zephir-parser
          key: ${{ runner.os }}-${{ matrix.php }}-zephir-parser-${{ steps.zephir-parser-cache.outputs.key }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-zephir-parser-

      - name: Install Zephir Parser
        run: |
          if [ ! -f ~/php-zephir-parser/LICENSE ]; then
            rm -rf ~/php-zephir-parser
            git clone -b "$ZEPHIR_PARSER_VERSION" \
              --depth 1 \
              -q https://github.com/phalcon/php-zephir-parser \
              ~/php-zephir-parser
          fi

          cd ~/php-zephir-parser
          phpize
          ./configure --with-php-config=/usr/bin/php-config --enable-zephir_parser
          make -j"$(getconf _NPROCESSORS_ONLN)"
          sudo make install
          echo 'extension="zephir_parser.so"' | sudo tee "/etc/php/7.4/cli/conf.d/zephir_parser.ini"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Setup Composer Token
        run: |
          # To increase the Composer rate limit we're use GitHub authentication
          if [ -n "${{ secrets.COMPOSER_TOKEN }}" ]; then
            composer config github-oauth.github.com "${{ secrets.COMPOSER_TOKEN }}"
          fi

      - name: Install Zephir
        run: |
          wget --no-clobber -O "$HOME/zephir" "https://github.com/phalcon/zephir/releases/download/${ZEPHIR_VERSION}/zephir.phar"
          chmod +x "$HOME/zephir"

      - name: Generate C code
        run: |
          $HOME/zephir fullclean
          $HOME/zephir build
          echo "extension=phalcon.so" >> /etc/php/7.4/cli/php.ini

      - name: Verify install
        run: php --ri phalcon

      - name: Install packages
        run: composer install --prefer-dist

      - name: Setup tests
        run: |
          cp tests/_ci/.env.default .env
          vendor/bin/codecept build

      - name: Run all tests
        env:
          DATA_MYSQL_PORT: ${{ job.services.mysql.ports['3306'] }}
          DATA_POSTGRES_PORT: ${{ job.services.postgres.ports['5432'] }}
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        run: |
          vendor/bin/codecept run --ext DotReporter cli
          vendor/bin/codecept run --ext DotReporter unit
          vendor/bin/codecept run --ext DotReporter integration
          vendor/bin/codecept run --ext DotReporter database --env mysql
          vendor/bin/codecept run --ext DotReporter database --env sqlite

      - name: Upload codecoverage on 7.4
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
